input {
    jdbc {
        #### 1단계의 문제점 (매번 똑같은 데이터를 가져옴.)
        # # jar파일의 경로
        # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://my-database-class:3306/mydocker02"
        # jdbc_user => "root"
        # jdbc_password => "root"
        # # 이 명령문을 언제 실행할것인지 예약.
        # # 분 시 
        # schedule => "* * * * *"
        # # 들어가서 입력할 QUERY문
        # statement => "select * from product"
    

        # ### 2단계    
        # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://my-database-class:3306/mydocker02"
        # jdbc_user => "root"
        # jdbc_password => "root"        
        # schedule => "* * * * *"
        # ## 어떤 컬럼밸류를 사용할것인지
        # use_column_value => true
        # ## 어떤 컬럼을 추적할것인지?
        # tracking_column => "updatedat"
        # tracking_column_type => "timestamp"
        # ## 이 파일안에 마지막 실행한 데이터를 저장한다.
        # last_run_metadata_path => "./aaa.txt"
        # statement => "select id, name, price, updatedat from product where updatedat > :sql_last_value order by updatedat asc"
    
        ### 3단계    
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker02"
        jdbc_user => "root"
        jdbc_password => "root"        
        schedule => "* * * * *"
        use_column_value => true
        tracking_column => "updatedat"
        tracking_column_type => "numeric"
        last_run_metadata_path => "./log.txt"
        statement => "select id, star, contents, unix_timestamp(updatedat) as updatedat, userid from review_board where unix_timestamp(updatedat) > :sql_last_value order by updatedat asc"


        # statement => "select unix_timestamp(a.updatedat) as updatedat, a.*, b.id as user_id, from review_board a left join user b on a.userid = b.id where unix_timestamp(a.updatedat) > :sql_last_value order by updatedat asc"
        
    }
}


filter { 
    mutate { 
        remove_field => ["@timestamp","@version"] 
    } 
}




output{
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "reviews"
    }
}